import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;

import ij.*;
import ij.plugin.filter.*;
import ij.process.*;
import ij.gui.*;

public class DCT implements PlugInFilter {

	ImagePlus imp; // Fenêtre contenant l'image de référence
	final static int BLOCK_SIZE = 8;

	public int setup(String arg, ImagePlus imp) {
		this.imp = imp;
		return PlugInFilter.DOES_8G;
	}

	public void run(ImageProcessor ip) {



		FloatProcessor fp = (FloatProcessor) (ip.duplicate().convertToFloat());
		fp.subtract(128);
		for(int x=0;x<ip.getWidth();x+=BLOCK_SIZE){
			for(int y=0;y<ip.getHeight();y+=BLOCK_SIZE){
				fp.setRoi(x, y, BLOCK_SIZE, BLOCK_SIZE);
				forwardDCT2D(fp);				

				for(int i=0;i<BLOCK_SIZE;++i){
					for(int j=0;j<BLOCK_SIZE;++j){
						fp.putPixelValue(x+i, y+j, Math.round(fp.getPixelValue(x+i, y+j)));
					}
				}
				ImageProcessor imgP=fp.resize(BLOCK_SIZE);
			}
		}
		this.forwardDCT2D(fp);
	}

	/**
	 * Transformation DCT 1D directe (méthode de classe)
	 * @param imageOrigine(m) Signal 1D d'entrée (double[])
	 * @return signaltransform(u) Signal transformé (double[])
	 */ 
	public double[] forwardDCT1D(double[] imageOrigine) {
		int tailleSignal = imageOrigine.length;	// Taille du signal
		double k = Math.sqrt(2.0 / tailleSignal); // Facteur de normalisation
		double[] signaltransform = new double[tailleSignal];	// résulat
		for (int u = 0; u < tailleSignal; u++) {
			double cu = 1.0;
			if (u == 0)
				cu = 1.0 / Math.sqrt(2);	// Facteur de normalisation
			double somme = 0.0;
			for (int m = 0; m < tailleSignal; m++) {
				somme = somme + imageOrigine[m] * Math.cos(Math.PI * (m + 0.5) * u / tailleSignal);
			}
			signaltransform[u] = k * cu * somme;
		}
		return signaltransform;
	}

	// ---------------------------------------------------------------------------------
	/**
	 * Transformation DCT 1D inverse (méthode de classe)
	 * @param signalTransform(u) Signal 1D transformé (double[])
	 * @return inverse(m) signal inverse (double[])
	 */
	public double[] inverseDCT1D(double[] signalTransform) {
		int tailleSignal = signalTransform.length;	// Taille du signal
		double k = Math.sqrt(2.0 / tailleSignal);	// Facteur de normalisation
		double[] inverse = new double[tailleSignal];	// résulat
		for (int m = 0; m < tailleSignal; m++) {
			double somme = 0;
			for (int u = 0; u < tailleSignal; u++) {
				double cu = 1.0;
				if (u == 0)
					cu = 1.0/Math.sqrt(2);	// Facteur de normalisation dépendant de u
				somme = somme + cu * signalTransform[u] * Math.cos(Math.PI * (m + 0.5) * u / tailleSignal);
			}
			inverse[m] = k * somme;
		}
		return inverse;
	}

	public void forwardDCT2D(FloatProcessor fp) {

		Rectangle r=fp.getRoi();
		if(r==null)
			r=new Rectangle(0, 0, fp.getWidth(), fp.getHeight());
		
		int width=r.width;
		int height=r.height;
		
		// Traitement des lignes
		for (int j = 0; j <height; j++) {
			double[] ligne = new double[fp.getWidth()];
			for (int i = 0; i < fp.getWidth(); i++) {
				ligne[i] = fp.getPixelValue(i+r.x, i+r.y);
			}
			ligne = this.forwardDCT1D(ligne);
			for (int i = 0; i < width; i++) {
				fp.putPixelValue(i+r.x, i+r.y, ligne[i]);
			}
		}

		// Traitement des colonnes
		for (int i = 0; i < width; i++) {
			double[] colonne = new double[fp.getHeight()];
			for (int j = 0; j < fp.getHeight(); j++) {
				colonne[i] = fp.getPixelValue(i+r.x, i+r.y);
			}
			colonne = this.forwardDCT1D(colonne);
			for (int j = 0; j < height; j++) {
				fp.putPixelValue(i+r.x, i+r.y, colonne[j]);
			}
		}
		this.imp = new ImagePlus("DCT", fp);
		this.imp.show();
	}

// ---------------------------------------------------------------------------------
	/**
	 * Transformation DCT 2D inverse (méthode de classe)
	 * 
	 * @param fp
	 *            Signal 2D d'entrée et de sortie (FloatProcessor)
	 */
	public void inverseDCT2D(FloatProcessor fp) {

		//Traitement des lignes 
		for (int j = 0; j < fp.getHeight(); j++) {
			double[] ligne = new double[fp.getWidth()];
			for (int i = 0; i < fp.getWidth(); i++) {
				ligne[i] = fp.getf(j, i);
			}
			ligne = inverseDCT1D(ligne);
			for (int i = 0; i < fp.getWidth(); i++) {
				fp.setf(j, i, (float) ligne[i]);
			}
		}

		// Traitement des colonnes
		for (int i = 0; i < fp.getWidth(); i++) {
			double[] colonne = new double[fp.getHeight()];
			for (int j = 0; j < fp.getHeight(); j++) {
				colonne[j] = fp.getf(j, i);
			}
			colonne = inverseDCT1D(colonne);
			for (int j = 0; j < fp.getHeight(); j++) {
				fp.setf(j, i, (float) colonne[j]);
			}
		}

	}

}
