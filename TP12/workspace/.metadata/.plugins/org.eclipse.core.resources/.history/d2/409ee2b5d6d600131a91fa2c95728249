import ij.process.FloatProcessor; // Pour classe Float Processor

abstract public class DCT2D {

	// ---------------------------------------------------------------------------------
	/**
	 * Transformation DCT 2D directe (méthode de classe) utilisant la
	 * séparabilité
	 * 
	 * @param fp
	 *            Signal 2D d'entrée et de sortie (MxN) (FloatProcessor)
	 */
	public static void forwardDCT(FloatProcessor fp) {

		// Traiter les lignes
		for (int i = 0; i < fp.getHeight(); i++) {
			double[] tmp = new double[fp.getHeight()];

			for (int j = 0; j < fp.getWidth(); j++)
				tmp[j] = fp.getPixelValue(i, j);

			tmp = DCT1D.forwardDCT(tmp);

			for (int y = 0; y < fp.getHeight(); ++y) {
				fp.putPixelValue(i, y, tmp[y]);
			}
		}

		// Traiter les colonnes de l'image résultant du traitement des lignes
		for (int i = 0; i < fp.getWidth(); i++) {
			double[] tmp = new double[fp.getHeight()];

			for (int j = 0; j < fp.getHeight(); j++)
				tmp[j] = fp.getPixelValue(i, j);

			tmp = DCT1D.forwardDCT(tmp);

			for (int y = 0; y < fp.getHeight(); ++y) {
				fp.putPixelValue(i, y, tmp[y]);
			}

		}
	}

	// ---------------------------------------------------------------------------------
	/**
	 * Transformation DCT 2D inverse (méthode de classe)
	 * 
	 * @param fp
	 *            Signal 2D d'entrée et de sortie (FloatProcessor)
	 */
	public static void inverseDCT(FloatProcessor fp) {

		// Traiter les lignes
		for (int i = 0; i < fp.getHeight(); i++) {
			double[] transform = DCT1D.inverseDCT(fp.getLine(0, i,
					fp.getLineWidth() - 1, i));
			for (int j = 0; j < fp.getLineWidth(); j++) {
				fp.setf(j, i, (float) transform[j]);
			}
		}

		// Traiter les colonnes de l'image résultant du traitement des lignes
		for (int i = 0; i < fp.getWidth(); i++) {
			double[] tmp = new double[fp.getHeight()];

			for (int j = 0; j < fp.getHeight(); j++)
				tmp[j] = fp.getPixelValue(i, j);

			tmp = DCT1D.inverseDCT(tmp);

			for (int y = 0; y < fp.getHeight(); ++y) {
				fp.putPixelValue(i, y, tmp[y]);
			}

		}

	}
}